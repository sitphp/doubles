<?php
/**
 * This file is part of the "sitphp/doubles" package.
 *
 *  @license MIT License
 *  @link https://github.com/sitphp/doubles
 *  @copyright Alexandre Geiswiller <alexandre.geiswiller@gmail.com>
 */

namespace Doubles\Lib;

use Doubles\Lib\Expectation;
use Doubles\Lib\ExpectationCollection;
use Doubles\Lib\DoubleCall;
use Doubles\Exceptions\InvalidArgumentException;
use Doubles\Exceptions\RuntimeException;
use Doubles\Stubs\StubInterface;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\Constraint\Constraint;

class DoubleStub
{

    private static $_double_initialized = false;
    private static $_double_closed = false;
    private static $type;
    private static $_double_expectations = [];
    /** @var DoubleCall[] $_double_calls */
    private static $_double_calls = [];
    private static $_double_config = [];
    private static $_double_reference;
    private static $_double_reference_instance;
    protected static $_double_blacklisted_methods = [
        '_double_initialize',
        '_double_setConfig',
        '_double_getConfig',
        '_method',
        '_double_handleInstanceCall',
        '_double_handleStaticCall',
        '_double_getExpectation',
        '_double_hasExpectation',
        '_double_getMethodTypeParams',
        '_double_getReference',
        '_double_assertMethodCount',
        '_double_assertMethodArgs',
        '_double_close',
    ];

    /**
     * Initialize with config
     *
     * @param string $type
     * @param array|null $_double_config
     */
    static function _double_initialize(string $type, array $_double_config = null)
    {
        if (self::$_double_initialized) {
            return;
        }
        self::_double_setType($type);
        if (isset($_double_config)) {
            foreach ($_double_config as $key => $value) {
                self::_double_setConfig($key, $value);
            }
        }
        if (isset($_double_config['reference'])) {
            self::$_double_reference = $_double_config['reference'];
        }
        self::$_double_initialized = true;
    }

    /**
     * Set config value
     *
     * @param string $label
     * @param $value
     */
    protected static function _double_setConfig($label, $value)
    {
        if (!is_string($label)) {
            throw new InvalidArgumentException('Invalid "label" argument : should be string');
        }
        self::$_double_config[$label] = $value;
    }

    /**
     * Get config value
     *
     * @param string $label
     * @return array|mixed|null
     */
    protected static function _double_getConfig($label)
    {
        if (!is_string($label)) {
            throw new InvalidArgumentException('Invalid "label" argument : should be string');
        }
        $_double_config_parts = explode('.', $label);
        $_double_config = &self::$_double_config;
        foreach ($_double_config_parts as $_double_config_part) {
            if (!isset($_double_config[$_double_config_part])) {
                return null;
            }
            $_double_config = &$_double_config[$_double_config_part];
        }
        return $_double_config;
    }

    /**
     * Set double type (mock, dummy or alias)
     *
     * @param string $type
     */
    protected static function _double_setType(string $type)
    {
        if (!in_array($type, ['mock', 'dummy', 'alias'])) {
            throw new InvalidArgumentException('Invalid double type : expected "mock", "dummy" or "alias"');
        }
        self::$type = $type;
    }

    /**
     * Return double type
     *
     * @return string
     */
    protected static function _double_getType()
    {
        return self::$type;
    }


    /**
     * Check if method can be asserted and return method expectation
     *
     * @param $method
     * @return ExpectationCollection
     */
    public static function _method($method)
    {
        if(!is_array($method)){
            $method = [$method];
        }
        $expectation_collection = new ExpectationCollection();
        foreach ($method as $method_name) {
            if (in_array($method_name, self::$_double_blacklisted_methods)) {
                throw new InvalidArgumentException('Method "' . $method_name . '" belongs to the double library and cannot be asserted');
            }
            $expectation = self::_double_getExpectation($method_name);
            $expectation_collection->add($expectation);
        }
        return $expectation_collection;
    }

    /**
     * Handle instance calls
     *
     * @param $method
     * @param mixed ...$args
     * @return mixed|null|object
     * @throws \ReflectionException
     */
    protected function _double_handleInstanceCall($method, $args)
    {
        // Save call data
        if (!isset(self::$_double_calls[$method])) {
            self::$_double_calls[$method] = [];
        }
        self::$_double_calls[$method][] = new DoubleCall($method, $args);

        // Resolve return value
        $call_count = count(self::$_double_calls[$method]);
        $method_definition = self::_double_getMethodTypeDefinition($method, $call_count);
        $type = $method_definition[0];
        switch ($type) {
            case 'dummy':
                if($method == '__construct' && null !== $_double_reference = self::_double_getReference()){
                    $_double_reference_reflexion = new \ReflectionClass($_double_reference);
                    self::$_double_reference_instance = $_double_reference_reflexion->newInstanceWithoutConstructor();
                    return null;
                } else {
                    $return = null;
                }
                break;
            case 'stub':
                /** @var StubInterface $stub */
                $stub = $method_definition[1];
                $return = $stub->invoke([
                    'args' => $args,
                    'method' => $method,
                    'class' => __CLASS__,
                    'instance' => $this
                ]);
                break;
            case 'mock':
                $_double_reference = self::_double_getReference();
                $parent_class = get_parent_class(__CLASS__);
                if ($method == '__construct' && $_double_reference !== null) {
                    self::$_double_reference_instance = new $_double_reference(...$args);
                }
                if ($_double_reference !== null) {
                    $return = self::$_double_reference_instance->$method($args);
                } else if (!$parent_class) {
                    $return = null;
                } else if (is_callable([$parent_class, $method])) {
                    $return = $parent_class::$method(...$args);
                } else {
                    $return = null;
                }
                break;
            default:
                throw new RuntimeException('Internal error: method type unknown or undefined');
        }
        return $return;
    }

    /**
     * Handle static calls
     *
     * @param $method
     * @param mixed ...$args
     * @return null
     * @throws \ReflectionException
     */
    protected static function _double_handleStaticCall($method, $args)
    {
        // Save call data
        if (!isset(self::$_double_calls[$method])) {
            self::$_double_calls[$method] = [];
        }
        self::$_double_calls[$method][] = new DoubleCall($method, $args);

        // Resolve return value
        $call_count = count(self::$_double_calls[$method]);
        $type_params = self::_double_getMethodTypeDefinition($method, $call_count);
        $type = $type_params[0];
        switch ($type) {
            case 'dummy':
                $return = null;
                break;
            case 'stub':
                /** @var StubInterface $stub */
                $stub = $type_params[1];
                $return = $stub->invoke([
                    'args' => $args,
                    'method' => $method,
                    'class' => __CLASS__
                ]);
                break;
            case 'mock':
                $parent_class = get_parent_class(__CLASS__);
                if (null !== $_double_reference = self::_double_getReference()) {
                    $return = $_double_reference::$method($args);
                } else if (!$parent_class) {
                    $return = null;
                } else if (is_callable([$parent_class, $method])) {
                    $return = $parent_class::$method(...$args);
                } else {
                    $return = null;
                }
                break;
            default:
                throw new RuntimeException('Type undefined or invalid for method ' . __CLASS__ . '::' . $method . '()');
        }
        return $return;
    }

    /**
     * Return given method expectation
     *
     * @param $method
     * @return Expectation | array
     */
    protected static function _double_getExpectation($method = null)
    {
        if (!isset($method)) {
            return self::$_double_expectations;
        }
        if (isset(self::$_double_expectations[$method])) {
            return self::$_double_expectations[$method];
        }
        return self::$_double_expectations[$method] = self::_double_resolveExpectation($method);
    }

    protected static function _double_resolveExpectation($method)
    {
        if (!method_exists(__CLASS__, $method)) {
            throw new InvalidArgumentException('Method "' . $method . '" cannot be tested because it doesn\'t exist. You can add custom methods with the "setMethod" method"');
        }
        $reflection = new \ReflectionMethod(__CLASS__, $method);
        if ($reflection->isPrivate()) {
            throw new InvalidArgumentException('Method ' . __CLASS__ . '::' . $method . '() cannot be tested because it is private');
        }
        if (!self::_double_getConfig('allow_protected_methods')) {
            if ($reflection->isProtected()) {
                throw new InvalidArgumentException('Method ' . __CLASS__ . '::' . $method . '() cannot be tested because it is protected. Set config parameter "allow_protected_methods" to "true" or use the "allowProtectedMethods" method to allow testing protected methods');
            }
        }
        return self::$_double_expectations[$method] = new Expectation($method);
    }

    /**
     * Check if method has expectation
     *
     * @param $method
     * @return bool
     */
    protected static function _double_hasExpectation($method)
    {
        return isset(self::$_double_expectations[$method]);
    }

    /**
     * Return method type with parameters
     *
     * @param $method
     * @param $call_count
     * @return array
     */
    static function _double_getMethodTypeDefinition($method, $call_count)
    {
        if (self::_double_hasExpectation($method)) {
            $expectation = self::_double_getExpectation($method);
            $type = $expectation->getType($call_count) ?: [self::_double_getType()];
        } else {
            $type = [self::_double_getType()];
        }
        return $type;
    }

    /**
     * Get class reference
     *
     * @return mixed
     */
    protected static function _double_getReference()
    {
        return self::$_double_reference;
    }

    /**
     * Run count assertions
     */
    protected static function _double_assertMethodCount()
    {
        // Check asserted methods
        foreach (self::_double_getExpectation() as $method => $expectation) {
            $call_count = isset(self::$_double_calls[$method]) ? count(self::$_double_calls[$method]) : 0;
            $assert_count = $expectation->getCount();
            if ($assert_count === null) {
                continue;
            }
            if ($assert_count instanceof \Closure) {
                $assert_count(self::$_double_calls[$method]);
            } else if ($assert_count instanceof Constraint) {
                Assert::assertThat($call_count, $assert_count, 'Method "' . $method . '" was called an unexpected ' . $call_count . ' times');
            } else if ((filter_var($assert_count, FILTER_VALIDATE_INT) || filter_var($assert_count, FILTER_VALIDATE_INT) === 0)) {
                Assert::assertEquals($assert_count, $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted ' . $assert_count . ' times');
            } else if (is_string($assert_count)) {
                if ($assert_count[0] == '>' && $assert_count[1] == '=') {
                    $limit = ltrim($assert_count, '>=');
                    Assert::assertGreaterThanOrEqual($limit, $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted ' . $limit . ' or more times');
                } else if ($assert_count[0] == '>') {
                    $limit = ltrim($assert_count, '>');
                    Assert::assertGreaterThan($limit, $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted more than ' . $limit . ' times');
                } else if ($assert_count[0] == '<' && $assert_count[1] == '=') {
                    $limit = ltrim($assert_count, '<=');
                    Assert::assertLessThanOrEqual($limit, $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted ' . $limit . ' or less times');
                } else if ($assert_count[0] == '<') {
                    $limit = ltrim($assert_count, '<');
                    Assert::assertLessThanOrEqual($limit, $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted less than ' . $limit . ' times');
                } else {
                    $limits = explode('-', $assert_count);
                    Assert::assertGreaterThanOrEqual($limits[0], $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted ' . $limits[0] . ' or more times');
                    Assert::assertLessThanOrEqual($limits[1], $call_count, 'Method "' . $method . '" was called ' . $call_count . ' times when excepted ' . $limits[1] . ' or less times');
                }
            } else {
                throw new RuntimeException('Unexpected count value' . $assert_count);
            }
        }
        // Assert non-asserted methods
        if (self::_double_getConfig('test_unexpected_methods')) {
            foreach (self::$_double_calls as $method => $_double_calls) {
                $call_count = count($_double_calls);
                if (self::_double_hasExpectation($method)) {
                    continue;
                } else {
                    Assert::assertEquals(0, count($_double_calls), 'Method "' . $method . '" was called ' . $call_count . ' times when excepted 0 times');
                }
            }
        }
    }

    /**
     * Run arguments assertions
     */
    protected static function _double_assertMethodArgs()
    {
        /** @var Expectation $expectation */
        foreach (self::_double_getExpectation() as $method => $expectation) {
            if (!isset(self::$_double_calls[$method])) {
                continue;
            }
            foreach (self::$_double_calls[$method] as $i => $call) {
                $call_count = $i + 1;
                $call_args = $call->getArgs();
                $assert_args = $expectation->getArgs($call_count);
                if ($assert_args === null) {
                    continue;
                }
                if (is_callable($assert_args)) {
                    $assert_args(...$call_args);
                } else if (is_array($assert_args)) {
                    foreach($assert_args as $j => $assert_arg){
                        $call_arg = $call_args[$j] ?? null;
                        if ($assert_arg instanceof Constraint) {
                            Assert::assertThat($call_arg, $assert_arg, 'Argument ' . ($j + 1) . ' of method "' . $method . '" didn\'t match expected value on call ' . $call_count);
                        } else {
                            Assert::assertEquals($assert_arg, $call_arg, 'Argument ' . ($j + 1) . ' of method "' . $method . '" didn\'t match expected value on call ' . $call_count);
                        }
                    }
                } else if(is_string($assert_args) && $assert_args == 'no-args') {
                    Assert::assertEquals([], $call_args, 'No arguments expected but '.count($call_args).' found on call ' . $call_count);
                } else {
                    throw new RuntimeException('Invalid assertion type');
                }
            }
        }
    }

    /**
     * Run class assertions
     */
    public static function _double_close()
    {
        if (self::$_double_closed) {
            return false;
        }
        try {
            self::_double_assertMethodCount();
            self::_double_assertMethodArgs();
        } finally {
            self::$_double_closed = true;
        }
        return true;
    }
}